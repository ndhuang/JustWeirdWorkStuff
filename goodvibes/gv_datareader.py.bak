#!/usr/local/bin/python
import numpy as np
import pylab as pl

from datetime import datetime, timedelta
from os import path
import gzip
import os, sys
import warnings

class GoodVibeBoard(object):
    def __init__(self, mic, ticks_mic, accel, ticks_accel, temp, 
                 tick_period = 5.12e-6, seconds = True, start_time = None):
        self.mic = mic - np.mean(mic)
        self.ticks_mic = ticks_mic
        self.accel = accel - np.mean(accel)
        self.ticks_accel = ticks_accel
        self.temp = temp

        self.seconds = seconds
        self.tick_period = tick_period
        self.start_time = start_time

        if self.seconds:
            self.secs_mic = self.ticks_mic * self.tick_period
            self.secs_accel = self.ticks_accel * self.tick_period


    def make_time(self):
        if self.seconds and self.start_time is not None:
            self.mic_t = np.empty(np.shape(self.secs_mic), dtype = 'object')
            for i, t in enumerate(self.secs_mic):
                self.mic_t[i] = self.start_time + timedelta(seconds = t)
            self.accel_t = np.empty(np.shape(self.secs_accel), 
                                    dtype = 'object')
            for i, t in enumerate(self.secs_accel):
                self.accel_t[i] = self.start_time + timedelta(seconds = t)

    def find_accel_glitches(self, n_sigma):
        mean = np.mean(self.accel)
        std = np.std(self.accel)
        inds = np.nonzero(np.array(self.accel > mean + n_sigma * std) |
                          np.array(self.accel < mean - n_sigma * std))[0]
        times = [self.start_time + timedelta(seconds = t) 
                 for t in self.secs_accel[inds]]
        return times

    def split_on_timing(self):
        self.mic_sects, self.secs_mic_sects = self._split(self.mic, 
                                                          self.secs_mic)
        self.accel_sects, self.secs_accel_sects = self._split(self.accel,
                                                              self.secs_accel)

    def _split(self, y, t, upper = .0015, lower = .0001):
        dt = np.diff(t)
        inds = np.nonzero(np.bitwise_or(dt > upper, dt < lower))[0]
        sections = []
        sections_t = []
        last = 0
        for i in inds:
            section = y[last:i]
            section_t = t[last:i]
            if len(section) > 1:
                sections.append(section)
                sections_t.append(section_t)
            last = i
        return sections, sections_t

    def get_section(self, start, end):
        start = start.replace(tzinfo = None)
        end = end.replace(tzinfo = None)
        if not self.seconds:
            raise RuntimeError('You did not set `seconds`')
        if start < self.start_time:
            print start
            print self.start_time
            raise ValueError('`start` must be after `self.start_time`')
        end_s = end - self.start_time
        end_s = end_s.total_seconds()
        start_s = start - self.start_time
        start_s = start_s.total_seconds()

        inds_mic = np.nonzero(np.array(self.secs_mic > start_s) &
                              np.array(self.secs_mic < end_s))[0]
        inds_accel = np.nonzero(np.array(self.secs_accel > start_s) &
                                np.array(self.secs_accel < end_s))[0]

        ticks_mic = self.ticks_mic[inds_mic]
        ticks_mic -= ticks_mic[0]
        ticks_accel = self.ticks_accel[inds_accel]
        ticks_accel -= ticks_accel[0]
        return GoodVibeBoard(self.mic[inds_mic], ticks_mic,
                             self.accel[inds_accel], ticks_accel,
                             self.temp, self.tick_period, self.seconds, start)
                             
    def _dbprint(self, msg):
        if self.verbose:
            print msg

class GoodVibeReader(object):
    def __init__(self, directory, 
                 data_root = '/data/sptdaq/good_vibrations/parser_output/',
                 seconds = True, ips = ['244', '245', '247'], verbose = False):
        self.data_dir = path.join(data_root, directory)
        self.seconds = seconds
        self.ips = ips
        self.verbose = verbose
        self.start_time = datetime.strptime(directory, '%Y%m%d_%H%M%S')
        self.read()

    def read(self):
        self.all = []
        if '244' in self.ips:
            self._dbprint('reading 244')
            self.rx_x = self._read_single(path.join(self.data_dir, 
                                                    'ip' + '244'))
            self.rxx = self.rx_x
            self.all.append(self.rx_x)
        if '245' in self.ips:
            self._dbprint('reading 245')
            self.rx_y = self._read_single(path.join(self.data_dir, 
                                                    'ip' + '245'))
            self.rxy = self.rx_y
            self.all.append(self.rx_y)
        if '246' in self.ips:
            self._dbprint('reading 246')
            self.rx_z = self._read_single(path.join(self.data_dir, 
                                                    'ip' + '246'))
            self.rxz = self.rx_z
            self.all.append(self.rx_z)
        if '247' in self.ips:
            self._dbprint('reading 247')
            self.optics = self._read_single(path.join(self.data_dir, 
                                                      'ip' + '247'))
            self.all.append(self.optics)
            
    def _read_single(self, dir):
        def _read_gzip(filename, sensor, dtype):
            self._dbprint('\t reading %s' %sensor)
            try:
                datfile = gzip.open(filename)
            except IOError, err:
                warnings.warn('Problem opening %s data:\n%s' %(sensor, err))
                return None
            try:
                data = np.fromstring(datfile.read(), dtype = dtype)
            except Exception, err:
                warnings.warn('Problem reading %s data:\n%s' %(sensor, err))
                return None
            datfile.close()
            return data

        mic = _read_gzip(path.join(dir, 'mic.gz'), 'mic', 'uint16')
        ticks_mic = _read_gzip(path.join(dir, 'ticks_mic.gz'), 'ticks_mic', 
                              'int32')
        accel = _read_gzip(path.join(dir, 'accel.gz'), 'accel', 'uint16')
        ticks_accel = _read_gzip(path.join(dir, 'ticks_accel.gz'), 
                                 'ticks_accel', 'int32')
        temp = _read_gzip(path.join(dir, 'Temp.gz'), 'Temp', 'uint16')
        
        return GoodVibeBoard(mic, ticks_mic, accel, ticks_accel, temp, 
                              seconds = self.seconds, 
                              start_time = self.start_time)

    def _dbprint(self, msg):
        if self.verbose:
            print msg
